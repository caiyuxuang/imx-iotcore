#!/bin/bash
#
# Container #3 composition:
# ~~~~~~~~~~~~~~~~~~~~~~~~~
#   + bl31.bin        load addr 0x80000000
#   + u-boot-hash.bin load addr 0x80020000
#   + tee.bin         load addr 0xFE000000
#   + uefi.fit        load addr 0x80B83F5C (payload load addr 0x80B84000)
#
# Example mkimage outputs:
# ~~~~~~~~~~~~~~~~~~~~~~~~
#            Offset of entry
#            within container  Size of entry
#                    |             |
#                    V             V
# AP file_offset = 0x2000 size = 0x9400
#
# CST: CONTAINER 0 offset: 0x400                         <--- Offset of the image header within file
# CST: CONTAINER 0: Signature Block: offset is at 0x510  <--- Offset of the signature header

if [ -z $CONTAINER_PATH ] || [ -z $SRK_TABLE_PATH ] || [ -z $CERT_PEM_PATH ] || [ -z $LOGFILE_PATH ]; then
	echo "This script parses output of imx mkimage utility" >&2
	echo "in order to find signature header within imx container" >&2
	echo "and appends its addresses to csf template. The template is then" >&2
	echo "used to sign the container." >&2
	echo "" >&2
	echo "Required env variables:" >&2
	echo "  CONTAINER_PATH - Binary to be signed generated by mkimage" >&2
	echo "  SRK_TABLE_PATH - SRK table generated by srktool" >&2
	echo "  CERT_PEM_PATH  - Public key certificate in PEM format" >&2
	echo "  LOGFILE_PATH   - Public key certificate in PEM format" >&2
	echo "" >&2
	echo "Some env variable is not set!" >&2
	exit 1;
fi

# Index of the public key certificate within the SRK table (0 .. 3)
KEY_INDEX=0
# Type of SRK set (NXP or OEM)
SRK_SET="OEM"
# bitmask of the revoked SRKs
REVOCATIONS="0x0"

# Extract image header offset and signature block offset from mkimage logs
filter1=$(cat "$LOGFILE_PATH" | grep "CONTAINER 0" | tr '\n' ' ')
[[ $filter1 =~ ^CST:\ CONTAINER\ 0\ offset:\ (.*)\ CST:\ CONTAINER\ 0:\ Signature\ Block:\ offset\ is\ at\ (.*)$ ]]
if [ ${#BASH_REMATCH[@]} -ne 3 ]; then
	echo "Error parsing mkimage logs!"
	# exit 1
fi

echo "Container offset: ${BASH_REMATCH[1]}" >&2
echo "Signature block offset: ${BASH_REMATCH[2]}" >&2

# Fill CSF template and print to stdout
cat <<EOL
[Header]
Target = AHAB
Version = 1.0
[Install SRK]
File = "$SRK_TABLE_PATH"
Source = "$CERT_PEM_PATH"
Source index = $KEY_INDEX
Source set = $SRK_SET
Revocations = $REVOCATIONS
[Authenticate Data]
File = "$CONTAINER_PATH"
# Offsets = Container header  Signature block (printed out by mkimage)
Offsets   = ${BASH_REMATCH[1]}             ${BASH_REMATCH[2]}
EOL
